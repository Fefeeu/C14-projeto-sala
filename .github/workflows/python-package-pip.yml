name: Python Package using Pip

on:
  workflow_dispatch:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install . 
          # instala o projeto e suas dependências a partir do pyproject.toml

      - name: Install build tool
        run: python -m pip install build

      - name: Build package
        run: python -m build

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/

  teste:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install . pytest pytest-html
          # instala o projeto e suas dependências a partir do pyproject.toml

      # TODO: remover os arquivos .csv do projeto e baixar de um servidor remoto por terminal
      - name: Test with Pytest
        run: |
          mkdir -p reports
          pytest --html=reports/index.html

# Passo 1: Habilitar o GitHub Pages no seu Repositório
# No seu repositório no GitHub, vá em Settings (Configurações).
# No menu à esquerda, clique em Pages.
# Na seção "Build and deployment", em "Source", selecione GitHub Actions.

      - name: Upload Test Report
        if: always()
        uses: actions/upload-pages-artifact@v3
        with:
          path: reports/

  deploy:
    if: github.event_name == 'push'
    needs: teste
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
  notificacao:
    needs: build
    runs-on: ubuntu-latest
    
    env:
      REMETENTE_EMAIL: ${{ secrets.REMETENTE_EMAIL }}
      SENHA_EMAIL: ${{ secrets.SENHA_EMAIL }}
      DESTINATARIO_EMAIL: ${{ secrets.DESTINATARIO_EMAIL }}
      TITULO_EMAIL: "Pipeline do Repositório ${{ github.repository }} Concluída"
      CORPO_EMAIL: "O build e os testes foram concluídos com sucesso."

    steps:
      - uses: actions/checkout@v4

      - name: Enviar notificação com mailutils
        run: |
          # 1. Instala as dependências necessárias
          sudo apt-get update && sudo apt-get install -y mailutils

          # 2. Configura o .mailrc para usar o SMTP do Gmail
          #    Isso usa as variáveis de ambiente (REMETENTE_EMAIL, SENHA_EMAIL)
          echo "
          set smtp=smtp://smtp.gmail.com:587
          set smtp-use-starttls
          set smtp-auth=login
          set smtp-auth-user=\"$REMETENTE_EMAIL\"
          set smtp-auth-password=\"$SENHA_EMAIL\"
          set from=\"Notificação GitHub Actions <$REMETENTE_EMAIL>\"
          " > ~/.mailrc

          # 3. Adiciona um log para verificação
          echo "Tentando enviar e-mail para: $DESTINATARIO_EMAIL"

          # 4. Executa o comando para enviar o e-mail
          echo "$CORPO_EMAIL" | mail -s "$TITULO_EMAIL" "$DESTINATARIO_EMAIL"
          
          echo "Comando de envio de e-mail finalizado."
